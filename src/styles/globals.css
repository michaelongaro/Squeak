@tailwind base;
@tailwind components;
@tailwind utilities;

.baseFlex {
  @apply flex items-center justify-center;
}

.baseVertFlex {
  @apply flex flex-col items-center justify-center;
}

.cardDimensions {
  @apply h-[65px] w-[50px] mobileLarge:h-[70px] mobileLarge:w-[54px] tablet:h-[74px] tablet:w-[57px] desktop:h-[87px] desktop:w-[67px];
}

/* you very well might have to programmatically set the percentage back to 0% when
    vote completes/timer runs out (inside of useVoteHasBeenCast hook) */
@property --cooldown-percent {
  initial-value: 0%;
  inherits: false;
  syntax: "<percentage>";
}

/* mobile workaround to prevent user accidentally selecting something while in game */
.noUserSelect * {
  user-select: none;
}

.countdownTimerToast {
  background: conic-gradient(
    transparent var(--cooldown-percent),
    hsl(120deg 100% 18%) 0
  );
  border-radius: 50%;
  width: 1.25rem;
  height: 1.25rem;
  flex-shrink: 0;
  animation: timer 30s linear;
}

.cooldownVoteTimer {
  background: conic-gradient(
    transparent var(--cooldown-percent),
    rgba(0, 0, 0, 0.5) 0
  );
  border-radius: 0.375rem;
  width: 44px;
  height: 44px;
  flex-shrink: 0;
  animation: timer 30s linear;
}

.sheetCooldownVoteTimer {
  background: conic-gradient(
    transparent var(--cooldown-percent),
    rgba(0, 0, 0, 0.5) 0
  );
  border-radius: 0.375rem;
  width: 100%;
  height: 3rem;
  flex-shrink: 0;
  animation-play-state: paused;
}

.countdownTimerMobileVotingPreview {
  background: conic-gradient(
    transparent var(--cooldown-percent),
    hsl(120deg 100% 86%) 0
  );
  border-radius: 50%;
  width: 1rem;
  height: 1rem;
  flex-shrink: 0;
  animation: timer 30s linear;
}

@keyframes timer {
  to {
    --cooldown-percent: 100%;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 120 100 86%;
    --primary-foreground: 120 100% 18%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --mobile-sheet-input: 120 100% 18%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 120 100 86%;
    --primary-foreground: 120 100% 18%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --mobile-sheet-input: 120 100% 18%;

    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
}

* {
  scrollbar-width: thin;
  touch-action: manipulation; /* not sure if necessary, but removes double-tap to zoom on iOS */
}

body {
  background-color: transparent;
  /* ^ for when backgroundTexture is still loading */
  background-image: url("/backgroundTexture/backgroundTexture.png");
  background-repeat: repeat;
  -webkit-touch-callout: none;
  /* non-standard: prevents long touch popover on iOS devices */
}

.rotateDeckByACardAnimation {
  animation: rotateDeck 1s ease-in-out;
}

@keyframes fadeInAndOut {
  0% {
    opacity: 0;
  }

  40% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}

.plusOneBackground {
  animation: 1.15s ease-in-out fadeInAndOut;
}

@keyframes springScale {
  0% {
    opacity: 0;
    transform: scale(0);
  }

  30% {
    opacity: 1;
    transform: scale(1.1);
    /* Slight overshoot */
  }

  40% {
    opacity: 1;
    transform: scale(1);
  }

  60% {
    opacity: 1;
    transform: scale(1);
  }

  100% {
    opacity: 0;
    transform: scale(0);
  }
}

.springPlusOne {
  animation: 0.85s cubic-bezier(0.34, 1.56, 0.64, 1) 0.2s springScale;
}

@keyframes scaleDown {
  0% {
    opacity: 1;
    transform: scale(1);
  }

  100% {
    opacity: 0;
    transform: scale(0.85);
  }
}

/* also FYI: this isn't perfect, since there is a 700ms delay after placing king card down until it starts
   to scale down, but this is at least gets rid of the overflow issues from before */
/* a bit roundabout, but mirrors framer motion exit animation once king is played
   and deck is reset */
.kingScaleDown {
  animation: 0.55s linear 0.15s scaleDown;
}

@keyframes rotateDeck {
  0% {
    top: 0;
    z-index: 1000;
  }

  35% {
    top: -85px;
  }

  45% {
    z-index: 1;
  }

  99% {
    z-index: 1;
  }

  100% {
    top: 0;
    z-index: 500;
  }
}

@media (min-height: 800px) and (min-width: 1500px) {
  @keyframes rotateDeck {
    0% {
      top: 0;
      z-index: 1000;
    }

    35% {
      top: -95px;
    }

    45% {
      z-index: 1;
    }

    99% {
      z-index: 1;
    }

    100% {
      top: 0;
      z-index: 500;
    }
  }
}

/* just to signal to the player that they should (most likely) start off their
   round by drawing from their deck. */
@keyframes preFirstDrawPulse {
  0%,
  100% {
    filter: none;
  }

  50% {
    filter: drop-shadow(0px 0px 10px rgba(184, 184, 184, 1));
  }
}

@media (min-height: 700px) and (min-width: 1024px) {
  @keyframes preFirstDrawPulse {
    0%,
    100% {
      filter: none;
    }

    50% {
      filter: drop-shadow(0px 0px 15px rgba(184, 184, 184, 1));
    }
  }
}

.initDeckPulse {
  animation: preFirstDrawPulse 3s infinite;
}

@keyframes pulse {
  0%,
  100% {
    filter: none;
  }

  50% {
    filter: drop-shadow(0px 0px 5px rgba(184, 184, 184, 1));
  }
}

legend {
  font-weight: 500;
  filter: drop-shadow(2px 4px 3px rgba(0, 0, 0, 0.25));
  flex-wrap: nowrap;
  /* ^ seemed to have issues w/o this on older versions of Safari */
}

@keyframes regularCardDropShadow {
  0% {
    filter: drop-shadow(0px 0px 4px rgba(0, 0, 0, 0));
  }

  50% {
    filter: drop-shadow(8px 8px 4px rgba(0, 0, 0, 0.25));
  }

  100% {
    filter: drop-shadow(0px 0px 4px rgba(0, 0, 0, 0));
  }
}

@keyframes dotPulse {
  0% {
    transform: scale(0.5);
  }

  50% {
    transform: scale(1);
  }

  100% {
    transform: scale(0.5);
  }
}

.loadingDots {
  display: inline-block;
  position: relative;
  width: 20px;
  height: 5px;
}

.loadingDots div {
  position: absolute;
  width: 5px;
  height: 5px;
  border-radius: 50%;
  background: #b8ffb8;
  animation: dotPulse 1.4s infinite ease-in-out both;
}

.loadingDots div:nth-child(1) {
  left: 0px;
  animation-delay: -0.32s;
}

.loadingDots div:nth-child(2) {
  left: 6px;
  animation-delay: -0.16s;
}

.loadingDots div:nth-child(3) {
  left: 12px;
  animation-delay: 0s;
}

/* rather brutal workaround to get around the fact that Safari doesn't properly
   render linear-gradients within a fieldset/legend combo. */

fieldset {
  position: relative;
}

fieldset::after {
  content: "";
  display: block;
  position: absolute;
  top: -15px;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: calc(100% + 15px);
  border-radius: 0.375rem;
  /* green-800 to green-850 */
  background: linear-gradient(
    to bottom right,
    #166534 0%,
    hsl(143, 61%, 21%) 100%
  );
  z-index: -1;
}
